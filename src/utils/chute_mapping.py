import re

def parse_mapping(lines):
    """
    Parse lines like '0   CHU201 - S01017' into a dictionary.
    """
    mapping = {}
    for line in lines:
        line = line.strip()
        # Saltar vacíos o líneas con solo '-'
        if not line or line == "-" or line == " - ":
            continue

        # Intentar separar índice, Beumer y Amazon
        match = re.match(r"(\d+)\s+([A-Z]+\d+)\s*-\s*(S\d+)", line)
        if match:
            idx = int(match.group(1))
            beumer = match.group(2)
            amazon = match.group(3)
            mapping[idx] = {"beumer": beumer, "amazon": amazon}
    return mapping


if __name__ == "__main__":
    # Copia tu lista de texto aquí
    raw_text = """
0	CHU201 - S01017
1	-
2	CHU202 - S01019
3	-
4	CHU203 - S01021
5	-
6	CHU204 - S01023
7	-
8	CHU205 - S01025
9	-
10	CHU206 - S01027
11	-
12	CHU207 - S01029
13	-
14	CHU208 - S01031
15	-
16	CHU209 - S01033
17	CHU109 - S01034
18	CHU210 - S01035
19	CHU110 - S01036
20	CHU211 - S01037
21	CHU111 - S01038
22	CHU212 - S01039
23	CHU112 - S01040
24	CHU213 - S01041
25	CHU113 - S01042
26	CHU214 - S01043
27	CHU114 - S01044
28	CHU215 - S01045
29	CHU115 - S01046
30	CHU216 - S01047
31	CHU116 - S01048
32	CHU217 - S01049
33	CHU117 - S01050
34	CHU218 - S01051
35	CHU118 - S01052
36	CHU219 - S01053
37	CHU119 - S01054
38	CHU220 - S01055
39	CHU120 - S01056
40	CHU221 - S01057
41	CHU121 - S01058
42	CHU222 - S01059
43	CHU122 - S01060
44	CHU223 - S01061
45	CHU123 - S01062
46	CHU224 - S01063
47	CHU124 - S01064
48	CHU225 - S01065
49	CHU125 - S01066
50	CHU226 - S01067
51	CHU126 - S01068
52	CHU227 - S01069
53	CHU127 - S01070
54	CHU228 - S01071
55	CHU128 - S01072
56	CHU229 - S01073
57	CHU129 - S01074
58	CHU230 - S01075
59	CHU130 - S01076
60	CHU231 - S01077
61	CHU131 - S01078
62	CHU232 - S01079
63	CHU132 - S01080
64	CHU233 - S01080
65	CHU133 - S01082
66	CHU234 - S01083
67	CHU134 - S01084
68	CHU235 - S01085
69	CHU135 - S01086
70	CHU236 - S01087
71	CHU136 - S01088
72	CHU237 - S01089
73	CHU137 - S01090
74	-
75	CHU138 - S01092
76	CHU001 - S01091
77	 - 
78	 - 
79	 - 
80	-
81	-
82	-
83	-
84	-
85	-
86	-
87	-
88	-
89	-
90	-
91	-
92	CHU468 - S01093
93	CHU368 - S01094
94	CHU467 - S01095
95	CHU367 - S01096
96	CHU466 - S01097
97	CHU366 - S01098
98	CHU465 - S01099
99	CHU365 - S01100
100	CHU464 - S01101
101	CHU364 - S01102
102	CHU463 - S01103
103	CHU363 - S01104
104	CHU462 - S01105
105	CHU362 - S01106
106	CHU461 - S01107
107	CHU361 - S01108
108	CHU460 - S01109
109	CHU360 - S01110
110	CHU459 - S01111
111	CHU359 - S01112
112	CHU458 - S01113
113	CHU358 - S01114
114	CHU457 - S01115
115	CHU357 - S01116
116	CHU456 - S01117
117	CHU356 - S01118
118	CHU455 - S01119
119	CHU355 - S01120
120	CHU454 - S01121
121	CHU354 - S01122
122	CHU453 - S01123
123	CHU353 - S01124
124	CHU452 - S01125
125	CHU352 - S01126
126	CHU451 - S01127
127	CHU351 - S01128
128	CHU450 - S01129
129	CHU350 - S01130
130	CHU449 - S01131
131	CHU349 - S01132
132	CHU448 - S01133
133	CHU348 - S01134
134	CHU447 - S01135
135	CHU347 - S01136
136	CHU446 - S01137
137	CHU346 - S01138
138	CHU445 - S01139
139	CHU345 - S01140
140	CHU444 - S01141
141	CHU344 - S01142
142	CHU443 - S01143
143	CHU343 - S01144
144	CHU442 - S01145
145	CHU342 - S01146
146	CHU441 - S01147
147	CHU341 - S01148
148	CHU440 - S01149
149	CHU340 - S01150
150	CHU439 - S01151
151	CHU339 - S01152
152	CHU438 - S01153
153	CHU338 - S01154
154	CHU437 - S01155
155	CHU337 - S01156
156	CHU436 - S01157
157	CHU336 - S01158
158	CHU435 - S01160
159	CHU002 - S01159
160	CHU434 - S01161
161	CHU334 - S01162
162	CHU433 - S01163
163	CHU333 - S01164
164	CHU432 - S01165
165	CHU332 - S01166
166	CHU431 - S01167
167	CHU331 - S01168
168	CHU430 - S01169
169	CHU330 - S01170
170	CHU429 - S01171
171	CHU329 - S01172
172	-
173	-
174	-
175	-
176	CHU428 - S01173
177	CHU328 - S01174
178	CHU427 - S01175
179	CHU327 - S01176
180	CHU426 - S01177
181	CHU326 - S01178
182	CHU425 - S01179
183	CHU325 - S01180
184	CHU424 - S01181
185	CHU324 - S01182
186	CHU423 - S01183
187	CHU323 - S01184
188	CHU422 - S01185
189	CHU322 - S01186
190	CHU421 - S01187
191	CHU321 - S01188
192	CHU420 - S01189
193	CHU320 - S01190
194	CHU419 - S01191
195	CHU319 - S01192
196	CHU418 - S01193
197	CHU318 - S01194
198	CHU417 - S01195
199	CHU317 - S01196
200	CHU416 - S01197
201	CHU316 - S01198
202	CHU415 - S01199
203	CHU315 - S01200
204	CHU414 - S01201
205	CHU314 - S01202
206	CHU413 - S01203
207	CHU313 - S01204
208	CHU412 - S01205
209	CHU312 - S01206
210	CHU411 - S01207
211	CHU311 - S01208
212	CHU410 - S01209
213	CHU310 - S01210
214	CHU409 - S01211
215	CHU309 - S01212
216	CHU408 - S01213
217	CHU308 - S01214
218	CHU407 - S01215
219	CHU307 - S01216
220	CHU406 - S01217
221	CHU306 - S01218
222	CHU405 - S01219
223	CHU305 - S01220
224	CHU404 - S01221
225	CHU304 - S01222
226	CHU403 - S01223
227	CHU303 - S01224
228	CHU402 - S01225
229	CHU302 - S01226
230	CHU401 - S01227
231	CHU301 - S01228
232	-
233	-
234	-
235	-
236	-
237	-
238	-
239	-
240	CHU806 - S01229
241	CHU706 - S01230
242	CHU805 - S01231
243	CHU705 - S01232
244	CHU804 - S01233
245	CHU704 - S01234
246	CHU803 - S01235
247	CHU703 - S01236
248	CHU802 - S01237
249	CHU702 - S01238
250	CHU801 - S01239
251	CHU701 - S01240
252	-
253	-
254	-
255	-
256	CHU608 - S01015
257	-
258	CHU607 - S01013
259	-
260	CHU606 - S01011
261	-
262	CHU605 - S01009
263	-
264	CHU604 - S01007
265	-
266	CHU603 - S01005
267	-
268	CHU602 - S01003
269	-
270	CHU601 - S01001

    """

    # Separar por líneas
    lines = raw_text.strip().splitlines()

    mapping = parse_mapping(lines)

    # Imprimir resultado
    from pprint import pprint
    pprint(mapping)

